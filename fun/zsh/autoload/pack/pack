# vim: set filetype=zsh :

# Options {{{1

emulate -R zsh

setopt local_options

setopt warn_create_global

setopt extended_glob

#setopt null_glob

#zmodload zsh/regex


# Variables {{{1

local commande
local argumen
local operasys

# Arguments {{{1

commande=sync

argumen=()

# Commande {{{1

case $1 in
	help|h|man)
		commande=help
		shift
		;;

	sync|sy|=)
		commande=sync
		shift
		;;
	sync-files|sf|f=)
		commande=sync-files
		shift
		;;
	sync-ports|sp|p=)
		commande=sync-ports
		shift
		;;
	sync-keys|sk|k=)
		commande=sync-keys
		shift
		;;

	install|ins|in|+)
		commande=install
		shift
		;;
	reinstall|reins|rein)
		commande=reinstall
		shift
		;;
	local-install|localinstall|locins|locin|lin)
		commande=local-install
		shift
		;;
	reconfigure|reconfig|reconf)
		commande=reconfigure
		shift
		;;
	source-compile-install|source-install|source|src)
		commande=source-compile-install
		shift
		;;

	remove|rm|delete|del|out|ou|x)
		commande=remove
		shift
		;;
	purge|xx)
		commande=purge
		shift
		;;

	update|upgrade|up|+=)
		commande=update
		shift
		;;
	full-update|full-upgrade|fulup|dist-upgrade|++)
		commande=full-update
		shift
		;;
	bin-src-update|+++)
		commande=bin-src-update
		shift
		;;

	remove-orphan|ro|autoremove|ar)
		commande=remove-orphan
		shift
		;;

	clean-cache|clean|cln|c)
		commande=clean
		shift
		;;

	search|s|:)
		commande=search
		shift
		;;
	search-file|file|f|/)
		commande=search-file
		shift
		;;

	info|i|show|sh|description|desc|d)
		commande=info
		shift
		;;
	list-files|ls|l|files|fil|content|cont)
		commande=list-files
		shift
		;;

	depends|depend|dep)
		commande=depends
		shift
		;;
	reverse-depends|rdepends|rdepend|rdep)
		commande=reverse-depends
		shift
		;;


	list-group-members|list-group|lsgrp|lg|group|g)
		commande=list-group-members
		shift
		;;

	?*)
		commande=search
		;;
esac


while true
do
	case $1 in
		?*)
			argumen+=$1
			shift
			;;
		*)
			break
			;;
	esac
done

# Valeurs par défaut {{{1

(( $#commande == 0 )) && commande=sync

# Distribution {{{1

if which pacman &>>/dev/null
then
	operasys=archlinux
elif which xbps-query &>>/dev/null
then
	operasys=voidlinux
elif which apt &>>/dev/null
then
	operasys=debian
elif which pkg &>>/dev/null
then
	operasys=freebsd
fi

(( $#operasys == 0 )) && {

	echo "Impossible de déterminer la distribution !"

	return 1
}


# Affichage {{{1

echo "Distribution : $operasys"
echo
echo "Commande : $commande"
echo


# Aide {{{1

[[ $commande = help ]] && {

echo 'pack help, pack man : this help'
echo
echo 'pack sync|sy|= : sync local cache with repositories (default action)'
echo
echo 'pack sync-files|sf|f= : sync package contents (files) with repositories'
echo
echo 'pack sync-ports|sp|p= : sync local ports with repositories'
echo
echo 'pack install|ins|in|+ <package(s)> : install a package'
echo
echo 'pack reinstall|reins|rein <package(s)> : reinstall a package'
echo
echo 'pack local-install|localinstall|locins|locin|lin <package(s)> : install a local package'
echo
echo 'pack source-compile-install|source-install|source|src <package(s)> : fetch, compile & install a local package'
echo
echo 'pack remove|rm|delete|del|out|ou|x <package(s)> : remove a package'
echo
echo 'pack purge|xx <package(s)> : purge a package (remoe package and configuration files)'
echo
echo 'pack update|upgrade|up|+= : update packages'
echo
echo 'pack full-update|full-upgrade|fulup|dist-upgrade|++ : full-update packages, including changes in dependancies'
echo
echo 'pack bin-src-update|+++ : full-update binary and source packages, including changes in dependancies'
echo
echo 'pack clean|cln|c : clean local cache'
echo
echo 'pack search|s|: <pattern> : search in package name & description'
echo
echo 'pack <pattern> : search in package name & description'
echo '  (shortcut for pack search <pattern>, <pattern> must NOT be identical to a pack subcommand)'
echo
echo 'pack search-file|file|f|/ <file> : search file in packages'
echo
echo 'pack info|i|show|sh|description|desc|d <package> : info about a package'
echo
echo 'pack list-files|ls|l|files|fil|content|cont <package> : list content of a package'
echo
echo 'pack depends|depend|dep <package> : show the dependancies of a package'
echo
echo 'pack reverse-depends|rdepends|rdepend|rdep <package> : show the reverse dependancies of a package'
echo
echo 'pack list-group-members|list-group|lsgrp|lg|group|g <package> : list content of a group of packages'

} | sed 's/^/  /'


# ------------------------------------

# Archlinux {{{1

[[ $operasys = archlinux ]] && {

# Sync {{{2

[[ $commande = sync ]] && {

	echo "sudo pacman -Syy"
	echo

	sudo pacman -Syy
}


# Sync-files {{{2

[[ $commande = sync-files ]] && {

	echo "sudo pkgfile -u"
	echo

	sudo pkgfile -u

	echo "sudo pacman -Fy"
	echo

	sudo pacman -Fy
}


# Sync-ports {{{2

[[ $commande = sync-ports ]] && {

	echo "asp update"
	echo

	asp update
}


# Sync-keys {{{2

[[ $commande = sync-keys ]] && {

	echo "sudo pacman-key --refresh-keys"
	echo

	sudo pacman-key --refresh-keys
}


# Install {{{2

[[ $commande = install ]] && {

	echo "sudo pacman -S $=argumen"
	echo

	sudo pacman -S $=argumen
}


# Reinstall {{{2

[[ $commande = reinstall ]] && {

	echo "sudo pacman -S $=argumen"
	echo

	sudo pacman -S $=argumen
}


# Local-install {{{2

[[ $commande = local-install ]] && {

	echo "sudo pacman -U $=argumen"
	echo

	sudo pacman -U $=argumen
}


# Source-compile-install {{{2

[[ $commande = source-compile-install ]] && {

# 	echo "trizen -S $=argumen"
# 	echo
#
# 	trizen -S $=argumen

	echo "yay $=argumen"
	echo

	yay $=argumen
}


# Remove {{{2

[[ $commande = remove ]] && {

	echo "sudo pacman -Rns $=argumen"
	echo

	sudo pacman -Rns $=argumen
}


# Update {{{2

[[ $commande = update ]] && {

	echo "sudo pacman -Syyu"
	echo

	sudo pacman -Syyu
}


# Full-update {{{2

[[ $commande = full-update ]] && {

	echo "sudo pacman -Syyu"
	echo

	sudo pacman -Syyu
}


# Bin-src-update {{{2

[[ $commande = bin-src-update ]] && {

# 	echo "yaourt -Syua --devel"
# 	echo
#
# 	yaourt -Syua --devel

	echo "trizen -Syyu"
	echo

	trizen -Syyu
}


# Remove orphans {{{2

[[ $commande = remove-orphan ]] && {
	echo "pacman -Qdtq | sudo pacman -Rns -"
	echo
	pacman -Qdtq | sudo pacman -Rns -
}

# Clean cache {{{2

[[ $commande = clean ]] && {

	echo "sudo pacman -Scc"
	echo

	sudo pacman -Scc

	sleep 1 ; sync ; sleep 1

# 	echo
# 	echo "sudo pacman-optimize"
# 	echo

# 	sudo pacman-optimize

}


# Search {{{2

[[ $commande = search ]] && {

	#echo "pacman -Ss $=argumen"
	#echo

	#pacman -Ss $=argumen

	echo "pacsearch $=argumen"
	echo

	pacsearch $=argumen
}


# Search-file {{{2

[[ $commande = search-file ]] && {

	echo "pkgfile $=argumen"
	echo

	pkgfile $=argumen

	echo
	echo "pacman -Qo $=argumen"
	echo

	pacman -Qo $=argumen

	echo
	echo "pacman -F $=argumen"
	echo

	pacman -F $=argumen
}


# Info {{{2

[[ $commande = info ]] && {

	echo "pacman -Si $=argumen"
	echo

	pacman -Si $=argumen
}


# List-files {{{2

[[ $commande = list-files ]] && {

	#echo "pacman -Ql $=argumen"
	#echo

	#pacman -Ql $=argumen

	echo "pkgfile -l $=argumen"
	echo
	pkgfile -l $=argumen
}


# Depends {{{2

[[ $commande = depends ]] && {

	echo "pactree $=argumen"
	echo

	pactree $=argumen
}


# Reverse-depends {{{2

[[ $commande = reverse-depends ]] && {

	# Différence avec
	# whoneeds $=argumen ?

	echo "pacman -Sii $=argumen"
	echo

	pacman -Sii $=argumen
}


# List-group-members {{{2

[[ $commande = list-group-members ]] && {

	echo "pacman -Sg $=argumen"
	echo

	pacman -Sg $=argumen
}


}


# Voidlinux {{{1

[[ $operasys = voidlinux ]] && {

# Sync {{{2

[[ $commande = sync ]] && {
	echo "sudo xbps-install -S"
	echo
	sudo xbps-install -S
}

# Sync-files {{{2

[[ $commande = sync-files ]] && {
	echo "xlocate -S"
	echo
	xlocate -S
}

# Sync-ports {{{2

[[ $commande = sync-ports ]] && {

}

# Sync-keys {{{2

[[ $commande = sync-keys ]] && {

}

# Install {{{2

[[ $commande = install ]] && {
	echo "sudo xbps-install $=argumen"
	echo
	sudo xbps-install $=argumen
}

# Reinstall {{{2

[[ $commande = reinstall ]] && {
	echo "sudo xbps-install -f $=argumen"
	echo
	sudo xbps-install -f $=argumen
}

# Reconfigure {{{2

[[ $commande = reconfigure ]] && {
	echo "sudo xbps-reconfigure $=argumen"
	echo
	sudo xbps-reconfigure $=argumen
}

# Local-install {{{2

[[ $commande = local-install ]] && {

}

# Source-compile-install {{{2

[[ $commande = source-compile-install ]] && {

}

# Remove {{{2

[[ $commande = remove ]] && {
	echo "xbps-remove $=argumen"
	echo
	xbps-remove $=argumen
}

# Update {{{2

[[ $commande = update ]] && {
	echo "sudo xbps-install -Su"
	echo
	sudo xbps-install -Su
}

# Full-update {{{2

[[ $commande = full-update ]] && {
	echo "sudo xbps-install -Su"
	echo
	sudo xbps-install -Su
}

# Bin-src-update {{{2

[[ $commande = bin-src-update ]] && {

}

# Remove orphans {{{2

[[ $commande = remove-orphan ]] && {
	echo "sudo xbps-remove -o"
	echo
	sudo xbps-remove -o
}

# Clean cache {{{2

[[ $commande = clean ]] && {

}

# Search {{{2

[[ $commande = search ]] && {
	echo "xbps-query -Rs $=argumen"
	echo
	xbps-query -Rs $=argumen
}

# Search-file {{{2

[[ $commande = search-file ]] && {
	echo "xlocate $=argumen"
	echo
	xlocate $=argumen
}

# Info {{{2

[[ $commande = info ]] && {
	echo "xbps-query $=argumen"
	echo
	xbps-query $=argumen
}

# List-files {{{2

[[ $commande = list-files ]] && {
	echo "xbps-query -f $=argumen"
	echo
	xbps-query -f $=argumen
	if which xtree > /dev/null 2>&1
	then
		echo
		echo "xtree $=argumen"
		echo
		xtree $=argumen
	fi
}

# Depends {{{2

[[ $commande = depends ]] && {
	echo "xdeptree $=argumen"
	echo
	xdeptree $=argumen
}

# Reverse-depends {{{2

[[ $commande = reverse-depends ]] && {

}

# List-group-members {{{2

[[ $commande = list-group-members ]] && {

}

}

# Debian {{{1

[[ $operasys = debian ]] && {

# Sync {{{2

[[ $commande = sync ]] && {

	echo "sudo apt-get update"
	echo

	sudo apt-get update
}


# Sync-files {{{2

[[ $commande = sync-files ]] && {

	echo "sudo apt-file update"
	echo

	sudo apt-file update
}


# Sync-ports {{{2

[[ $commande = sync-ports ]] && {


}


# Sync-keys {{{2

[[ $commande = sync-keys ]] && {

	echo ""
	echo


}


# Install {{{2

[[ $commande = install ]] && {

	echo "sudo apt-get install $=argumen"
	echo

	sudo apt-get install $=argumen
}


# Reinstall {{{2

[[ $commande = reinstall ]] && {

	echo "sudo apt-get install --reinstall $=argumen"
	echo

	sudo apt-get install --reinstall $=argumen
}

# Reconfigure {{{2

[[ $commande = reconfigure ]] && {
	echo "sudo dpkg-reconfigure $=argumen"
	echo
	sudo dpkg-reconfigure $=argumen
}

# Local-install {{{2

[[ $commande = local-install ]] && {

	echo "sudo dpkg -i $=argumen"
	echo

	sudo dpkg -i $=argumen
}


# Source-compile-install {{{2

[[ $commande = source-compile-install ]] && {

}


# Remove {{{2

[[ $commande = remove ]] && {

	echo "sudo apt-get remove $=argumen"
	echo

	sudo apt-get remove $=argumen
}


# Purge {{{2

[[ $commande = purge ]] && {

	echo "sudo apt-get purge $=argumen"
	echo

	sudo apt-get purge $=argumen
}


# Update {{{2

[[ $commande = update ]] && {

	echo "sudo apt-get update && sudo apt-get upgrade"
	echo

	sudo apt-get update && sudo apt-get upgrade
}


# Full-update {{{2

[[ $commande = full-update ]] && {

	echo "sudo apt-get update && sudo apt-get dist-upgrade"
	echo

	sudo apt-get update && sudo apt-get dist-upgrade
}


# Bin-src-update {{{2

[[ $commande = bin-src-update ]] && {

}


# Remove orphans {{{2

[[ $commande = remove-orphan ]] && {
	echo "apt autoremove"
	echo
	apt autoremove
}

# Clean cache {{{2

[[ $commande = clean ]] && {

	echo "sudo apt-get autoclean"
	echo

	sudo apt-get autoclean
}


# Search {{{2

[[ $commande = search ]] && {

	echo "apt-cache search $=argumen"
	echo

	apt-cache search $=argumen
}


# Search-file {{{2

[[ $commande = search-file ]] && {

	echo "apt-file search $=argumen"
	echo

	apt-file search $=argumen
}


# Info {{{2

[[ $commande = info ]] && {

	echo "apt-cache show $=argumen"
	echo

	apt-cache show $=argumen
}


# List-files {{{2

[[ $commande = list-files ]] && {
	echo "apt-file list $=argumen"
	echo
	apt-file list $=argumen
}


# Depends {{{2

[[ $commande = depends ]] && {

	echo "apt-cache depends $=argumen"
	echo

	apt-cache depends $=argumen
}


# Reverse-depends {{{2

[[ $commande = reverse-depends ]] && {

	echo "apt-cache rdepends $=argumen"
	echo

	apt-cache rdepends $=argumen
}


# List-group-members {{{2

[[ $commande = list-group-members ]] && {

}


}


# Freebsd {{{1

[[ $operasys = freebsd ]] && {

# Sync {{{2

[[ $commande = sync ]] && {

	echo "sudo pkg update"
	echo

	sudo pkg update
}


# Sync-files {{{2

[[ $commande = sync-files ]] && {

	echo "Not defined"
	echo
}


# Sync-ports {{{2

[[ $commande = sync-ports ]] && {

	echo "sudo portsnap fetch update"
	echo

	sudo portsnap fetch update
}


# Sync-keys {{{2

[[ $commande = sync-keys ]] && {

	echo "Not defined"
	echo
}


# Install {{{2

[[ $commande = install ]] && {

	echo "sudo pkg install $=argumen"
	echo

	sudo pkg install $=argumen
}


# Reinstall {{{2

[[ $commande = reinstall ]] && {

	echo "Not defined"
	echo
}


# Local-install {{{2

[[ $commande = local-install ]] && {

	echo "Not defined"
	echo
}


# Source-compile-install {{{2

[[ $commande = source-compile-install ]] && {

	echo "cd /usr/ports ; make search name=$=argumen"
	echo

	cd /usr/ports ; make search name=$=argumen
}


# Remove {{{2

[[ $commande = remove ]] && {

	echo "sudo pkg delete $=argumen"
	echo

	sudo pkg delete $=argumen
}


# Update {{{2

[[ $commande = update ]] && {

	echo "sudo pkg upgrade"
	echo

	sudo pkg upgrade
}


# Full-update {{{2

[[ $commande = full-update ]] && {

	echo sudo pkg upgrade""
	echo

	sudo pkg upgrade
}


# Bin-src-update {{{2

[[ $commande = bin-src-update ]] && {

	echo "Not defined"
	echo
}


# Remove orphans {{{2

[[ $commande = remove-orphan ]] && {
	echo "sudo pkg autoremove"
	echo
	sudo pkg autoremove
}

# Clean cache {{{2

[[ $commande = clean ]] && {

}


# Search {{{2

[[ $commande = search ]] && {

	echo "pkg search $=argumen"
	echo

	pkg search $=argumen
}


# Search-file {{{2

[[ $commande = search-file ]] && {

	echo "pkg which $=argumen"
	echo

	pkg which $=argumen
}


# Info {{{2

[[ $commande = info ]] && {

	echo "pkg info $=argumen"
	echo

	pkg info $=argumen
}


# List-files {{{2

[[ $commande = list-files ]] && {

	echo "Not defined"
	echo
}


# Depends {{{2

[[ $commande = depends ]] && {

	echo "Not defined"
	echo
}


# Reverse-depends {{{2

[[ $commande = reverse-depends ]] && {

	echo "Not defined"
	echo
}


# List-group-members {{{2

[[ $commande = list-group-members ]] && {

	echo "Not defined"
	echo
}


}


# Less used

