# vim: set filetype=zsh :
# vim: set foldlevel=1 :

# Terminal {{{1


# Shell {{{1

# Jobs {{{2

sleep 500 # long running program
^Z
	zsh: suspended  sleep 500
jobs
	[1]  + suspended  sleep 500
bg
jobs
	[1]  + running    sleep 500
fg
^C
	zsh: interrupt  sleep 500
	zsh: exit 130

sleep 500 & # long running program
jobs
	[1]  + running    sleep 500

# Aliases {{{2

alias psgrep='ps auxww | /bin/grep -v grep | /bin/grep --color=auto'


# Pipe heredoc {{{2

# Les '...' autour de FIN sont nécessaires
# pour ne pas que le shell interprète les backslash

cat <<- 'FIN' | ed fichier
	/tutu/a
	ajout
	.
	g/b/a\
	apres\
	.
	%p
	w
FIN


# While < fichier {{{2

while read ligne
do
	eval $ligne

done < $fichier


# Commande | while {{{2

file *.svg | grep 'PNG' | awk '{ print $1 }' | sed 's/://' | while read fichier
do
	racine=${fichier%.*}
	echo "mv $fichier ${racine}.png"
	mv $fichier ${racine}.png
done


# Example of ed script {{{2

# Effacer le contenu d’un fichier

{ echo '1,$d' ; echo w } | ed $runfile

# Les '...' autour de FIN sont nécessaires
# pour ne pas que le shell interprète les backslash

cat <<- 'FIN' | ed toto
	g/b/a\
	apres\
	.
	%p
	w
FIN


# Variable contenant le nom d’une autre variable {{{2

	Nargs=$#
	eval "nom=\$$Nargs"

	Nargs=$#
	nom=${(P)Nargs}

	echo nom=$nom


# Dialog output -> var via exec M>&N {{{2

# Fonctionne

exec 3>&1
choix=$(dialog --menu "Liste" 0 0 0 $=tagitem 2>&1 1>&3)
exec 3>&-

# Ne fonctionne pas

choix=$(dialog --menu "Liste" 80 80 80 $=tagitem 3>&1 1>&2 2>&3 3>&-)

# Ne fonctionne pas

exec 3>&1
choix=$(dialog --menu "Liste" 80 80 80 $=tagitem 1>&2 2>&3)
exec 3>&-


# Dialog output -> var via named pipe {{{2

tube=~/racine/run/fifo/dialog

dialog --menu "Liste" 0 0 0 $=tagitem 2> $tube &

read choix < $tube


# Stopper / Reprendre un groupe de processus {{{2

kill -STOP -- -$groupe
kill -CONT -- -$groupe


# Groupe d’un processus {{{2

groupe=($(ps -eo "%r %p" | awk '{ if ( $2 == '$processus' ) print $1 }'))


# Processus appartenant à un groupe {{{2

arbre=($(ps -eo "%r %p" |
	awk '{ if ( $1 == '$groupe' ) print $2 }'
))

# Si on veut exclure le script à la racine du groupe

script=$$

arbre=($(ps -eo "%r %p" |
	awk '{ if ( $1 == '$groupe' && $2 != '$script' ) print $2 }'
))

echo $arbre
echo


# Arbre d’un processus {{{2

pstree -p $processus


# Arbre de processus & Feuilles {{{2

arbre=($processus)

feuilles=()

echo Arbre : $arbre
echo

while (( $#arbre > 0 ))
do
	suivant=()

	for branche in $arbre
	do
		enfants=($(ps -eo "%P %p" |
			awk '{ if ( $1 == '$branche' ) print $2 }'
		))

		if (( $#enfants > 0 ))
		then
			# echo Enfants de $branche : $enfants
			# echo

			suivant+=($enfants)
		else
			feuilles+=$branche
		fi
	done

	arbre=($suivant)

	# echo Arbre : $arbre
	# echo
done

echo Feuilles : $feuilles
echo


# Envoyer un signal à un arbre de processus {{{2

# Credits :
# https://stackoverflow.com/questions/392022/whats-the-best-way-to-send-a-signal-to-all-members-of-a-process-group/6481337

signal-arbre () {

    local iden=$1
    local signal=${2:--STOP}

	 # needed to stop quickly forking parent from producing children
	 # between child killing and parent killing

    kill -stop $iden

	for enfant in $(ps -o pid --no-headers --ppid $iden)
	do
        signal-arbre $enfant $signal
    done

    kill -$signal $iden
}


# Traps pour les signaux {{{2

# Pour ajouter une fonction liée au signal :
#
# trap fonction SIGNAL
#
# Pour effacer les fonctions liées au signal :
#
# trap - SIGNAL

clausule () {

	echo
	echo
	echo "On arrête ..."
	echo
	echo "sed -i '/^'$mid'/d' $runfile"
	echo

	sed -i '/^'$mid'/d' $runfile

	exit 128
}

trap clausule HUP INT TERM

echo "Traps"
echo "-----"
echo

trap

echo

# Dans une boucle avec sleep :
# sleep N retarde la prise en compte du trap de N secondes
# Pour éviter cela, remplacer:

sleep 300

# par:

sleep 300 &
wait $!



# Zsh {{{1

# Options {{{2

setopt extended_glob

setopt clobber

setopt local_options

setopt warn_create_global

setopt null_glob

setopt no_match
unsetopt null_glob


# Bindinges {{{2

^X h :
	info sur la complétion courante

^X n :
	cycle entres les types de complétion

* Bindkey Zsh

"^@" set-mark-command
"^A" beginning-of-line
"^B" backward-char
"^D" delete-char-or-list
"^E" end-of-line
"^F" forward-char
"^G" send-break
"^H" backward-delete-char
"^I" complete-word
"^J" accept-line
"^K" kill-line
"^L" clear-screen
"^M" accept-line
"^N" history-beginning-search-forward
"^O" accept-line-and-down-history
"^P" history-beginning-search-backward
"^Q" push-line
"^R" history-incremental-search-backward
"^S" history-incremental-search-forward
"^T" transpose-chars
"^U" kill-whole-line
"^V" quoted-insert
"^W" backward-kill-word
"^X^B" vi-match-bracket
"^X^F" vi-find-next-char
"^X^J" vi-join
"^X^K" kill-buffer
"^X^N" infer-next-history
"^X^O" overwrite-mode
"^X^P" predict-off
"^X^R" _read_comp
"^X^U" undo
"^X^V" vi-cmd-mode
"^X^X" exchange-point-and-mark
"^X*" expand-word
"^X=" what-cursor-position
"^X?" _complete_debug
"^XC" _correct_filename
"^XG" list-expand
"^Xa" all-matches
"^Xc" _correct_word
"^Xd" _list_expansions
"^Xe" _expand_word
"^Xg" list-expand
"^Xh" _complete_help
"^Xm" _most_recent_file
"^Xn" _next_tags
"^Xp" predict-on
"^Xr" history-incremental-search-backward
"^Xs" history-incremental-search-forward
"^Xt" _complete_tag
"^Xu" undo
"^X~" _bash_list-choices
"^Y" yank
"^[^D" list-choices
"^[^G" send-break
"^[^H" backward-kill-word
"^[^I" self-insert-unmeta
"^[^J" self-insert-unmeta
"^[^L" clear-screen
"^[^M" self-insert-unmeta
"^[^_" copy-prev-word
"^[ " expand-history
"^[!" expand-history
"^[\"" quote-region
"^[\$" spell-word
"^['" quote-line
"^[," _history-complete-older
"^[-" neg-argument
"^[." insert-last-word
"^[/" _history-complete-older
"^[0" digit-argument
"^[1" digit-argument
"^[2" digit-argument
"^[3" digit-argument
"^[4" digit-argument
"^[5" digit-argument
"^[6" digit-argument
"^[7" digit-argument
"^[8" digit-argument
"^[9" digit-argument
"^[;" _history-complete-newer
"^[<" beginning-of-buffer-or-history
"^[>" end-of-buffer-or-history
"^[?" which-command
"^[A" accept-and-hold
"^[B" backward-word
"^[C" capitalize-word
"^[D" kill-word
"^[F" forward-word
"^[G" get-line
"^[H" run-help
"^[L" down-case-word
"^[N" history-search-forward
"^[OA" up-line-or-history
"^[OB" down-line-or-history
"^[OC" forward-char
"^[OD" backward-char
"^[OF" end-of-line
"^[OH" beginning-of-line
"^[P" history-search-backward
"^[Q" push-line
"^[S" spell-word
"^[T" transpose-words
"^[U" up-case-word
"^[W" copy-region-as-kill
"^[[2~" overwrite-mode
"^[[3~" delete-char
"^[[A" history-beginning-search-backward
"^[[B" history-beginning-search-forward
"^[[C" forward-char
"^[[D" backward-char
"^[[F" end-of-line
"^[[H" beginning-of-line
"^[_" insert-last-word
"^[a" accept-and-hold
"^[b" backward-word
"^[c" capitalize-word
"^[d" kill-word
"^[e" edit-command-line-vimzsh
"^[f" forward-word
"^[g" get-line
"^[h" run-help
"^[l" down-case-word
"^[m" history-beginning-search-menu
"^[n" history-search-forward
"^[p" history-search-backward
"^[q" push-line-or-edit
"^[s" spell-word
"^[t" transpose-words
"^[u" up-case-word
"^[w" copy-region-as-kill
"^[x" execute-named-cmd
"^[y" yank-pop
"^[z" execute-last-named-cmd
"^[|" vi-goto-column
"^[~" _bash_complete-word
"^[^?" backward-kill-word
"^_" undo
" " magic-space
"!"-"~" self-insert
"^?" backward-delete-char
"\M-^@"-"\M-^?" self-insert

# Modules {{{2

zmodload zsh/regex


# Tableaux {{{2

éléments uniques, comme dans un ensemble :

${(u)var}

suppression

${(S:numéroDeLaCorrespondance:)var#motif}

formatage à gauche

${(l:largeur::chaineDeRemplissage::chaineDeContact:)var}

formatage à droite

${(r:largeur::chaineDeRemplissage::chaineDeContact:)var}

produit cartésien

a=(1 2) ; echo abc/$a --> abc/1 2
a=(1 2) ; echo abc/$^a --> abc/1 abc/2
a=(1 2) ; b=(a b) ; echo $^a/$^b --> 1/a 1/b 2/a 2/b

suite de nombres

echo {1..5} --> 1 2 3 4 5

???

${(A)=var::=liste}

# remove the ith element with
#
# foo[$i] =()
#
# instead.

# To remove element with content "b" from array:
#
# foo=(a b c)
# foo=(${foo#b})

# To remove element number $i: a=("${(@)a[1,$i-1]}" "${(@)a[$i+1,$#a]}")
#
# (The simpler construct a=($a[1,$i-1] $a[$i+1,$#a]) also removes empty elements.)
#
# ADDED:
#
# To remove any occurence of b: a=("${(@)a:#b}")
# :# is the hieroglyph to remove matching elements; "" and (@) is to operate correctly on arrays even if they contain empty elements.


# Dictionnaires {{{2

${(AA)=var::=cle1 val1 cle2 val2 ...}


# Complétion {{{2

commande abc<tab> :
	complétion sur les noms de fichiers + contexte : arguments, options, ...

$path[<tab> :
	complétion sur les éléments

tar xzvf archive <tab> :
	complétion sur les fichiers inclus dans l’archive

complétion par sous-ensembles :

cd /h/d/art/ec --> /home/user_name/art/eclats2vers

	idem avec les options pour :

a.j --> arbre.js
AS --> AlainSouchon



# Précommandes {{{2

noglob : désactive la génération de fichiers
nocorrect : désactive la correction


# Placer les lignes d’un fichier dans un tableau {{{2

identifiants=( ${(f)"$(< $runfile)"} )

# Avec traitement des lignes {{{3

identifiants=( ${(f)"$(< $runfile | awk '{print $1}')"} )


# Lignes inversées & uniques {{{3

dirstack=( ${(fuOa)"$(< $REPERTOIRES_FICHIER)"} )



# Placer les lignes de la sortie d’une commande dans un tableau {{{2

processi=("${(f)$(psgrep minuterie.zsh)}")


# L’élément est-il dans le tableau ? {{{2

[[ $tableau[(i)$element] -le $#tableau ]]

(( ${foo[(i)b]} <= ${#foo} ))

[[ -n "${foo[(r)b]}" ]] && echo 'b was found.' || echo 'b was not found.'

[[ ${foo[(r)b]} == b ]]

(( ${foo[(I)b]} )) \
  && echo "it's in" \
  || echo "it's somewhere else maybe"


# La sortie d’une commande comme fichier virtuel en argument {{{2

volume=$(awk -F"[][]" '/dB/ { print $2 }' <(amixer -c 0 sget Master))


