;; -*- mode: emacs-lisp; -*-

(setq a '((1 (2 . 3) (4 . 5)) (6 (7 . 8) (9 . 10))))
(setq al (cdr (car a)))
(assoc 2 al)
(rassoc 3 al)
(second (car a))

(setq l '((1 2) (3 4) ("a" "b") ("c" "d")))
(position '(1 2) l :test #'equal)
(position '(3 4) l :test #'equal)
(position '("a" "b") l :test #'equal)
(position '(5 6) l :test #'equal)

(nth 0 l)
(elt l 0)
(subseq l 0 3)
(subseq l 1 3)
(append l nil)
(append nil l)

(type-of l)
(type-of (subseq l 1 3))

(+ 1 2)
(funcall '+ 1 2)

(mapcar #'car torus/torus)

(setq l (quote (1 2)))
(mapcar '1+ l)
(mapcar #'1+ l)
(mapcar (quote 1+) l)
(mapcar (function 1+) l)
(setq a `("a" ,@l ,@l))


(equal 1 1)
(equal 1.0 1.00)
(equal 1 1.0)
(= 1 1.0)


(setq a (lambda (x) (* 2 x)))
(setq a '(lambda (x) (* 2 x)))

(funcall a 3)

(global-set-key (kbd "<f8> <") '(lambda () (interactive) (insert "⟻")))
(global-set-key (kbd "<f8> <") (lambda () (interactive) (insert "⟻")))


      ;; (print torus/torus buffer)

      ;; Better with pretty print : pp

(puthash
   (read-string "Name of the new ring : ")
   '((cons (buffer-file-name) (marker-position (point-marker))))
   torus/torus)

(maphash (lambda (k v) (message "( %s . %s )" k v)) torus/torus)

(write-region (buffer-string) nil torus/filename nil 'no-message)

       (pointmark (point-marker))
       (buffer (current-buffer))

;; TOOLS
;; ------------------------------

;; Credit : https://emacs.stackexchange.com/questions/36486/how-do-i-rotate-list-elements

;; Rotation <-
(setq liste '(1 2 3 4 5))
(setq l (cdr liste))
(setq l '(1 2 3 4 5))
(setf l (nconc (cdr l) (cons (car l) nil)))
(setf l (append (cdr l) (list (car l))))
(setf l (append (cdr l) (cons (car l) nil)))
(print liste)
(setf (cdr liste) l)
(append (cdr l) (cons (car l) nil))

;; Rotation ->
(setq l '(1 2 3 4 5))
(print (last l))
(setf l (nconc (last l) (butlast l)))
(setf l (append (last l) (butlast l)))
(append (last l) (butlast l))


Credit : https://stackoverflow.com/questions/2321904/elisp-how-to-save-data-in-a-file

;; This 'dump-vars-to-file routine will create some expressions that can be read by simply evaluating the expressions later (via a 'load command or 'read):

(defun dump-vars-to-file (varlist filename)
  "simplistic dumping of variables in VARLIST to a file FILENAME"
  (save-excursion
    (let ((buf (find-file-noselect filename)))
      (set-buffer buf)
      (erase-buffer)
      (dump varlist buf)
      (save-buffer)
      (kill-buffer))))

(defun dump (varlist buffer)
  "insert into buffer the setq statement to recreate the variables in VARLIST"
  (loop for var in varlist do
        (print (list 'setq var (list 'quote (symbol-value var)))
               buffer)))

;; I'm sure I'm missing some built-in routine that does a nicer job or is more flexible.

;; I tested it with this little routine:

(defun checkit ()
  (let ((a '(1 2 3 (4 5)))
        (b '(a b c))
        (c (make-vector 3 'a)))
    (dump-vars-to-file '(a b c) "/some/path/to/file.el")))
Which produced the output:

(setq a (quote (1 2 3 (4 5))))
(setq b (quote (a b c)))
(setq c (quote [a a a]))
