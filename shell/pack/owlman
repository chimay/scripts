#! /bin/sh

if [ "$(id -u)" -eq 0 ] ; then
	printf "%s can't be run as root.\n" "${0##*/}" >&2
	exit 1
fi

OWLMAN_AUR_HOME=${OWLMAN_AUR_HOME:-/tmp/owlman-aur}
OWLMAN_ABS_HOME=${OWLMAN_ABS_HOME:-/tmp/owlman-abs}
OWLMAN_CHANGELOG_DB=${OWLMAN_CHANGELOG_DB:-"$XDG_DATA_HOME/changelog_db"}
OWLMAN_ABS_ROOT=${OWLMAN_ABS_ROOT:-/var/abs}
OWLMAN_PACMAN_CACHE=${OWLMAN_PACMAN_CACHE:-/var/cache/pacman/pkg}
OWLMAN_PACMAN_LOG=${OWLMAN_PACMAN_LOG:-/var/log/pacman.log}
OWLMAN_BROWSER=${OWLMAN_BROWSER:-${BROWSER:-curl}}
OWLMAN_EDITOR=${OWLMAN_EDITOR:-${EDITOR:-vim}}
OWLMAN_ASK_EDIT=${OWLMAN_ASK_EDIT:-true}
OWLMAN_SUDO_WARN=${OWLMAN_SUDO_WARN:-true}
OWLMAN_IGNORE_OUTDATED=${OWLMAN_IGNORE_OUTDATED:-false}
OWLMAN_CLEAN_UP=${OWLMAN_CLEAN_UP:-false}
OWLMAN_MAX_URL=${OWLMAN_MAX_URL:-16}
OWLMAN_NOCONFIRM=${OWLMAN_NOCONFIRM:-false}

"$OWLMAN_NOCONFIRM" && pacman_args=--noconfirm

usage() {
	printf "Usage: %s <action> [...]\n" "${0##*/}"
	exit 1
}

sudorun() {
	if [ "$OWLMAN_SUDO_WARN" = "true" ] ; then
		warning "Running sudo."
		printf "\n"
	fi
	sudo $@
}

cleanup() {
	[ -e "$tmp_out" ] && rm "$tmp_out"
}

confirm() {
	message=$1
	default=${2:-y}
	[ "$default" = "y" ] && hint="Y/n" || hint="y/N"
	printf "%s [%s] " "$message" "$hint"
	read answer
	[ -z "$answer" ] && answer=$default
	case $answer in
		y|Y|yes|Yes)
			return 0
			;;
		n|N|no|No)
			return 1
			;;
		*)
			printf "%s\n" "Please answer with 'y' or 'n'."
			confirm "$message" "$default"
			;;
	esac
}

pkgedit() {
	pkgbuild="$OWLMAN_AUR_HOME/$1/PKGBUILD"
	[ -e "$pkgbuild" ] || cower -df -t "$OWLMAN_AUR_HOME" "$1"
	if [ $? -eq 0 ] ; then
		pkginst="$(find "$OWLMAN_AUR_HOME/$1" -maxdepth 1 -type f -name '*.install' | head -n 1)"
		if [ -n "$pkginst" ] ; then
			$OWLMAN_EDITOR "$pkgbuild" "$pkginst"
		else
			$OWLMAN_EDITOR "$pkgbuild"
		fi
	fi
}

aur_fmt() {
	case "$1" in
		category|description|url|page|version|license)
			f="%$(printf "%.1s" "$1")" ;;
		depends)
			f=%D ;;
		makedepends)
			f=%M ;;
	esac
	printf "%s" "$f"
}

sync_fmt() {
	case "$1" in
		repository|description|url|version)
			f="%$(printf "%.1s" "$1")" ;;
		license)
			f=%L ;;
		depends)
			f=%D ;;
		requiredby)
			f=%N ;;
	esac
	printf "%s" "$f"
}

putinfo() {
	key=$1
	shift
	sf=$(sync_fmt $key)
	af=$(aur_fmt $key)
	if [ $local_only -eq 1 ] ; then
		expac -Q "$sf" "$@"
	else
		while [ $# -gt 0 ] ; do
			expac -S "$sf" "$1" 2> /dev/null || cower -ii --format "$af\n" "$1" 2> /dev/null || missing_pkg "$1"
			shift
		done
	fi
}

printc() {
	color=$1
	shift
	if [ -t 1 ] ; then
		printf "\033[%sm%s\033[0m" "$color" "$@"
	else
		printf "%s" "$@"
	fi
}

white() {
	printc "1;37" "$@"
}

green() {
	printc "1;32" "$@"
}

magenta() {
	printc "1;35" "$@"
}

missing_pkg() {
	printf "Package '%s' was not found.\n" "$@" >&2
}

warning() {
	magenta "==>"
	white " $@"
}

info() {
	green "==>"
	white " $@"
}

if [ $# -lt 1 ] ; then
	usage
fi

action=$1
shift
tmp_out=/tmp/owlman.$$
trap cleanup EXIT

[ ! -d "$OWLMAN_AUR_HOME" ] && mkdir -p "$OWLMAN_AUR_HOME"
[ ! -d "$OWLMAN_ABS_HOME" ] && mkdir -p "$OWLMAN_ABS_HOME"

quiet_results=0
extended_infos=0
aur_only=0
repo_only=0
local_only=0
ignore_outdated=0
fetch_deps=0
rm_cascade=0
rm_recur=0
crawl_homes=0
sort_by_votes=0

while getopts "qeaolidcrsw-:" opt ; do
	case $opt in
		q)
			quiet_results=1
			;;
		e)
			extended_infos=1
			;;
		a)
			aur_only=1
			;;
		o)
			repo_only=1
			;;
		l)
			local_only=1
			;;
		i)
			ignore_outdated=1
			;;
		d)
			fetch_deps=1
			;;
		c)
			rm_cascade=1
			;;
		r)
			rm_recur=1
			;;
		s)
			sort_by_votes=1
			;;
		w)
			crawl_homes=1
			;;
		-)
			case $OPTARG in
				quiet)
					quiet_results=1
					;;
				extended)
					extended_infos=1
					;;
				aur)
					aur_only=1
					;;
				repo)
					repo_only=1
					;;
				local)
					local_only=1
					;;
				ignore-outdated)
					ignore_outdated=1
					;;
				dependencies)
					fetch_deps=1
					;;
				cascade)
					rm_cascade=1
					;;
				recursive)
					rm_recur=1
					;;
				sort-by-votes)
					sort_by_votes=1
					;;
				crawl-homes)
					crawl_homes=1
					;;
			esac
			;;
	esac
done

shift $(($OPTIND - 1))

case $action in
	update)
		if [ $aur_only -ne 1 ]; then
			info "Checking sync repos for updates."
			printf "\n"
			sudorun pacman "$pacman_args" -Syu
		fi
		if [ $repo_only -ne 1 ] ; then
			info "Checking AUR for updates."
			printf "\n"
			cower -u | tee "$tmp_out"
			if [ -s "$tmp_out" ] ; then
				for pkgname in $(sed 's/^:: *\([^ ]\+\) .*$/\1/' "$tmp_out") ; do
					confirm "Reinstall '${pkgname}'?" && owlman install "$pkgname"
				done
			else
				printf "%s\n" "No AUR updates found."
			fi
		fi
		;;
	pull)
		repos=$(find "$OWLMAN_AUR_HOME" -mindepth 3 -maxdepth 3 -type d -regex ".*/src/[^/]+" | grep -v '\-build$')
		for repo in $repos ; do
			[ ! -e "$repo" ] && continue
			from_home=${repo#"$OWLMAN_AUR_HOME/"}
			pkgname=${from_home%%/*}
			pacman -Q "$pkgname" > /dev/null 2>&1
			if [ $? -eq 1 ] ; then
				magenta "==> "
				white "$pkgname "
				printf "%s\n" "is not installed."
				confirm "Remove it from the cache?" && rm -vrf "$OWLMAN_AUR_HOME/$pkgname"
				continue
			fi
			green "$pkgname"
			printf "\n"
			if owlman_update_repository "$repo" ; then
				confirm "Reinstall package '${pkgname}'?" && cd "$OWLMAN_AUR_HOME/$pkgname" && makepkg "$pacman_args" -ifs
			fi
		done
		;;
	info)
		opts='-i'
		[ $extended_infos -eq 1 ] && opts="$opts -i"
		if [ $local_only -eq 1 ] ; then
			pacman -Q $opts "$@"
		else
			while [ $# -gt 0 ] ; do
				pacman -S $opts "$1" 2> /dev/null || cower $opts "$1" 2> /dev/null || missing_pkg "$1"
				shift
			done
		fi
		;;
	list | lsgrep)
		pattern='.'
		if [ "$action" = "lsgrep" ] ; then
			pattern=$1
			shift
		fi
		pacman -Qlq "$@" | grep -i "$pattern"
		;;
	query | search)
		opts='-s'
		filter=owlman_color_filter
		if [ $quiet_results -eq 1 ] ; then
			opts="$opts -q"
			filter=cat
		fi
		if [ "$action" = "query" ] ; then
			pacman -Q $opts "$@" | $filter
		elif [ "$action" = "search" ] ; then
			if [ $aur_only -eq 0 ] ; then
				pacman -S $opts "$@" | $filter
			fi
			if [ $repo_only -eq 0 ] ; then
				[ $ignore_outdated -eq 1 -o "$OWLMAN_IGNORE_OUTDATED" = "true" ] && opts="$opts -o"
				[ $sort_by_votes -eq 1 ] && opts="$opts --sort=votes"
				cower $opts "$@" | $filter
			fi
		fi
		;;
	owns)
		opts='-o'
		[ $quiet_results -eq 1 ] && pacopt="$opts -q"
		pacman -Q $opts "$@"
		;;
	version | repository | category | description | license | url)
		putinfo "$action" "$@"
		;;
	grep)
		pattern=$1
		shift
		pkg_files=$(pacman -Qlq "$@")
		if [ $? -eq 0 ] ; then
			[ ! "$pattern" = "\n" ] && grep --color=auto -Ii "$pattern" $pkg_files 2> /dev/null
		fi
		;;
	downgrade)
		if [ ! -d "$OWLMAN_PACMAN_CACHE" ] ; then
			printf "%s\n" "Pacman's cache directory doesn't exist." >&2
			exit 1
		fi
		while [ $# -gt 0 ] ; do
			pkgname=$1
			pacman -Q "$pkgname" > /dev/null 2>&1
			if [ $? -ne 0 ] ; then
				missing_pkg "$pkgname"
				exit 1
			fi
			previous_pkg=$(ls -1tc "$OWLMAN_PACMAN_CACHE/$pkgname"-[0-9]* 2> /dev/null | head -n 2 | tail -n 1)
			if [ -e "$previous_pkg" ] ; then
				printf "%s\n" "$previous_pkg" >> "$tmp_out"
			fi
			shift
		done
		if [ -s "$tmp_out" ] ; then
			sudorun pacman "$pacman_args" -U $(cat "$tmp_out")
			: > "$tmp_out"
		fi
		;;
	remove | uninstall)
		opts=''
		[ $rm_cascade -eq 1 ] && opts="${opts}c"
		[ $rm_recur -eq 1 ] && opts="${opts}s"
		sudorun pacman "$pacman_args" -R${opts} "$@"
		;;
	download)
		opts='-df'
		[ $fetch_deps -eq 1 ] && opts="$opts -d"
		cower $opts -t "$OWLMAN_AUR_HOME" "$@"
		;;
	abs)
		while [ $# -gt 0 ] ; do
			repo=$(pacman -Si "$1" | grep -i "^repository" | sed 's/[^:]\+: \(.*\)/\1/')
			[ -n "$repo" ] && sudo abs "$repo/$1" && cp -rv "$OWLMAN_ABS_ROOT/$repo/$1" "$OWLMAN_ABS_HOME"
			shift
		done
		;;
	edit)
		while [ $# -gt 0 ] ; do
			pkgedit "$1"
			shift
		done
		;;
	install)
		while [ $# -gt 0 ] ; do
			{ pacman -Si "$1" || pacman -Sg "$1"; } > "$tmp_out" 2> /dev/null
			if [ -s "$tmp_out" ] ; then
				info "Installing $1."
				printf "\n"
				if [ $local_only -eq 1 ] ; then
					cd "$OWLMAN_ABS_HOME/$1" && makepkg "$pacman_args" -ifs
				else
					sudorun pacman "$pacman_args" -S "$1"
				fi
				[ $? -ne 0 ] && exit 1
			else
				cower -ddf -t "$OWLMAN_AUR_HOME" "$1" | tee "$tmp_out"
				if [ -s "$tmp_out" ] ; then
					deps=$(sed 's/^[^ ]\+ \([^ ]\+\) .*$/\1/' "$tmp_out" | tac)
					opts="-ifs $pacman_args"
					[ "$OWLMAN_CLEAN_UP" = "true" ] && opts="$opts -c"
					for pkgname in $deps; do
						info "Installing $pkgname."
						printf "\n"
						cd "$OWLMAN_AUR_HOME/$pkgname"
						[ "$OWLMAN_ASK_EDIT" = "true" ] && confirm "Edit PKGBUILD?" && pkgedit "$pkgname"
						if [ ! "$pkgname" = "$1" ] ; then
							makepkg --asdeps $opts
						else
							makepkg $opts
						fi
						[ $? -ne 0 ] && exit 1
					done
					: > "$tmp_out"
				else
					missing_pkg "$1"
				fi
			fi
			shift
		done
		;;
	upgrade)
		while [ $# -gt 0 ] ; do
			pacman -Q "$1" > /dev/null 2>&1
			if [ $? -ne 0 ] ; then
				magenta "==> "
				white "$1 "
				printf "%s\n" "is not installed."
				shift
				continue
			fi
			pkgdir="$OWLMAN_AUR_HOME/$1"
			[ -d "$pkgdir" ] || cower -df -t "$OWLMAN_AUR_HOME" "$1"
			cd "$pkgdir" 2> /dev/null || exit 1
			opts="-ifs $pacman_args"
			[ "$OWLMAN_CLEAN_UP" = "true" ] && opts="$opts -c"
			makepkg $opts
			[ $? -ne 0 ] && exit 1
			shift
		done
		;;
	leftovers)
		log_lo=$(grep -Eo '/[[:graph:]]+\.pac(new|orig|save)' "$OWLMAN_PACMAN_LOG" | sort -u)
		for i in $log_lo
		do
			if [ -e "$i" ] ; then
				ext=${i##*.}
				if [ "$ext" != "pacsave" ] ; then
					if confirm "Merge '${i}'?" n ; then
						vimdiff "${i%.*}" "$i"
					else
						confirm "Overwrite '${i%.*}' with '${i}'?" n && sudorun mv "$i" "${i%.*}"
					fi
				fi
				if [ -e "$i" ] ; then
					confirm "Remove '${i}'" n && sudorun rm "$i"
				fi
			fi
		done
		;;
	page)
		while [ $# -gt 0 ] ; do
			url=$(putinfo page "$1")
			[ -n "$url" ] && $OWLMAN_BROWSER $url > /dev/null 2>&1
			shift
		done
		;;
	home)
		if [ $crawl_homes -eq 1 ] ; then
			pkg_list=$(pacman -Ssq "$@"; cower -sq "$@")
			if [ -n "$pkg_list" ] ; then
				set -- $pkg_list
			fi
		fi
		cnt=0
		while [ $# -gt 0 ] ; do
			url=$(putinfo url "$1")
			if [ -n "$url" ] ; then
				printf "%s: %s\n" "$1" "$url"
				$OWLMAN_BROWSER $url > /dev/null 2>&1
				cnt=$((cnt+1))
			fi
			shift
			if [ $((cnt % OWLMAN_MAX_URL)) -eq 0 -a $cnt -gt 0 -a $# -gt 0 ] ; then
				confirm "Continue ($# remaining)?" && continue || exit 0
			fi
		done
		;;
	changelog)
		if [ ! -e "$OWLMAN_CHANGELOG_DB" ] ; then
			printf "The changelog database doesn't exist.\n" >&2
			exit 1
		fi
		while [ $# -gt 0 ] ; do
			url=$(grep "^$1[[:space:]]" "$OWLMAN_CHANGELOG_DB" | cut -f 2)
			if [ -z "$url" ] ; then
				printf "Not in the changelog database: '%s'.\n" "$1" >&2
			else
				version=$(putinfo version "$1" | sed 's/-[0-9]\+$//')
				url=$(eval printf "%s" $url)
				if [ $quiet_results -eq 1 ] ; then
					printf "%s\n" "$url"
				else
					$BROWSER "$url"
				fi
			fi
			shift
		done
		;;
	last)
		num=${@:-7}
		sed -n 's/.*\[PACMAN\] \(installed\|upgraded\) \([^ ]\+\).*/\2/p' "$OWLMAN_PACMAN_LOG" | tail -n "$num"
		;;
	deps)
		putinfo depends "$@"
		;;
	mdeps)
		putinfo makedepends "$@"
		;;
	uses)
		putinfo requiredby "$@"
		;;
	check)
		pacman -Qk "$@"
		;;
	binlist)
		pacman -Qlq "$@" | grep '/s\?bin/.*[^/]$'
		;;
	liblist)
		pacman -Qlq "$@" | grep '/lib/.*[^/]$'
		;;
	etclist)
		pacman -Qlq "$@" | grep '/etc/.*[^/]$'
		;;
	manlist)
		pacman -Qlq "$@" | grep '/man./.*[^/]$'
		;;
	doclist)
		pacman -Qlq "$@" | grep '/share/doc/[^/]\+/.*[^/]$'
		;;
	refresh)
		sudorun pacman -Syy
		;;
	cleanup)
		sudorun pacman -Sc
		;;
	prune)
		if [ ! -d "$OWLMAN_AUR_HOME" ] ; then
			printf "%s\n" "The cache directory is invalid." >&2
			exit 1
		fi
		cd "$OWLMAN_AUR_HOME"
		for pkgname in * ; do
			if [ -d "$pkgname" ] ; then
				pacman -Q "$pkgname" > /dev/null 2>&1
				[ $? -eq 1 ] && rm -vrf -- "$pkgname"
			fi
		done
		;;
	foreigns)
		opts='-m'
		[ $quiet_results -eq 1 ] && opts="$opts -q"
		pacman -Q $opts
		;;
	orphans)
		opts='-dt'
		[ $quiet_results -eq 1 ] && opts="$opts -q"
		pacman -Q $opts
		;;
	autoremove | autouninstall)
		sudorun pacman "$pacman_args" -Rs $(pacman -Qdtq)
		;;
	*)
		printf "Unknown action: '%s'.\n" "$action" >&2
		exit 1
		;;
esac
